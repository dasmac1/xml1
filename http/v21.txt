Q1.
import java.util.*;
class Q1
{
    public static void main(String args[]) {
        LinkedList l1=new LinkedList();
        Scanner s=new Scanner(System.in);
        System.out.println("Enter how many records");
        int n=s.nextInt();
        System.out.println("Enter"+ n +"subject name");
        for(int i=1;i<=n;i++) {
            String c=s.next();
            l1.add(c);
        }
        System.out.println("records of linkledlist is");
        Iterator i=l1.iterator();
        while(i.hasNext()) {
            System.out.println(i.next());
        }
    }
}

Q2
import java.util.LinkedList;

class ProducerConsumer {
    private LinkedList<Integer> buffer = new LinkedList<>();
    private int capacity = 1; 

    public void produce() throws InterruptedException {
        int value = 0;
        while (true) {
            synchronized (this) {
                while (buffer.size() == capacity) {
                    wait(); 
                }
                System.out.println("Producer produced: " + value);
                buffer.add(value++);
                notify(); 
                Thread.sleep(1000); 
            }
        }
    }
    public void consume() throws InterruptedException {
        while (true) {
            synchronized (this) {
                while (buffer.size() == 0) {
                    wait(); 
                }
                int val = buffer.removeFirst();
                System.out.println("Consumer consumed: " + val);
                notify(); 
                Thread.sleep(1000); 
            }
        }
    }
}
public class Main {
    public static void main(String[] args) {
        ProducerConsumer pc = new ProducerConsumer();
        Thread producerThread = new Thread(() -> {
            try {
                pc.produce();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        Thread consumerThread = new Thread(() -> {
            try {
                pc.consume();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        producerThread.start();
        consumerThread.start();
    }
}
