Q1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.TreeSet;

class Q1 {
    Q1() {
    }

    public static void main(String[] var0) throws IOException, NumberFormatException {
        BufferedReader var1 = new BufferedReader(new InputStreamReader(System.in));
        TreeSet var2 = new TreeSet();
        System.out.println("Enter n");
        int var3 = Integer.parseInt(var1.readLine());
        System.out.println("Enter the elements");

        int var4;
        for(var4 = 1; var4 <= var3; ++var4) {
            int var5 = Integer.parseInt(var1.readLine());
            var2.add(var5);
        }

        System.out.println("the elements in sorted order");
        System.out.println(var2);
        System.out.println("Enter element to search from collection");
        var4 = Integer.parseInt(var1.readLine());
        boolean var6 = var2.contains(var4);
        if (var6) {
            System.out.println("the element is found ");
        } else {
            System.out.println("the element is NOT found ");
        }

    }
}

Q2.
import java.awt.*;
public class Q2 extends Frame 
{
    int f = 0;
     public Q2() {
        Signal s = new Signal();
        s.start();
        setSize(500, 500);
        setVisible(true);
    }

    public void paint(Graphics g)
 {
        switch (f) {
            case 0:
                g.setColor(Color.red);
                g.fillOval(60, 60, 50, 50);
                g.setColor(Color.black);
                g.fillOval(60, 120, 50, 50);
                g.drawOval(60, 180, 50, 50);
                break;

            case 1:
                g.setColor(Color.yellow);
                g.fillOval(60, 120, 50, 50);
                g.setColor(Color.black);
                g.fillOval(60, 60, 50, 50);
                g.drawOval(60, 180, 50, 50);
                break;

            case 2:
                g.setColor(Color.green);
                g.fillOval(60, 180, 50, 50);
                g.setColor(Color.black);
                g.fillOval(60, 120, 50, 50);
                g.drawOval(60, 60, 50, 50);
                break;
        }
    }
    class Signal extends Thread {
        public void run() {
            while (true) {
                f = (f + 1) % 3;
                repaint();
                try {
                    Thread.sleep(1000);
                } catch (Exception ignored) {
                }
            }
        }
    }
    public static void main(String[] args) {
        new Q2();
    }
}